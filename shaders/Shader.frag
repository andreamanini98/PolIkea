#version 450#extension GL_ARB_separate_shader_objects : enablelayout(location = 0) in vec3 fragPos;layout(location = 1) in vec3 fragNorm;layout(location = 2) in vec2 fragUV;layout(location = 0) out vec4 outColor;layout(set = 0, binding = 0) uniform GlobalUniformBufferObject {	vec3 DlightDir;		// direction of the direct light	vec3 DlightColor;	// color of the direct light	vec3 AmbLightColor;	// ambient light	vec3 eyePos;		// position of the viewer} gubo;layout(set = 0, binding = 1) uniform GlobalUniformBufferObjectSpot {	vec3 lightPos;	vec3 lightDir;	vec4 lightColor;	vec3 eyePos;} guboSpot;layout(set = 1, binding = 0) uniform UniformBufferObject {	float amb;	float gamma;	vec3 sColor;	mat4 mvpMat;	mat4 mMat;	mat4 nMat;} ubo;layout(set = 1, binding = 1) uniform sampler2D tex;const float beta = 4.5f;	// decay exponent of the spotlightconst float g = 3;			// target distance of the spotlightconst float cosout = 0.85;	// cosine of the outer angle of the spotlightconst float cosin  = 0.95;	// cosine of the inner angle of the spotlightvoid main() {	vec3 N = normalize(fragNorm);				// surface normal	vec3 V = normalize(gubo.eyePos - fragPos);	// viewer direction	vec3 L = normalize(gubo.DlightDir);			// light direction	vec3 albedo = texture(tex, fragUV).rgb;		// main color	vec3 MD = albedo;	vec3 MS = ubo.sColor;	vec3 MA = albedo * ubo.amb;	vec3 LA = gubo.AmbLightColor;	vec3 sl = guboSpot.lightColor.rgb *	(pow(g/length(guboSpot.lightPos - fragPos), beta)) *	clamp(((dot(normalize(guboSpot.lightPos - fragPos), guboSpot.lightDir)) - cosout) / (cosin - cosout), 0.0, 1.0);	outColor = vec4(		clamp(MD * clamp(dot(L,N),0.0f,1.0f) +		MS * pow(clamp(dot(N, normalize(L + V)), 0.0f, 1.0f), ubo.gamma) +		LA * MA + sl,		0.0f, 1.0f), 1.0f);	// output color}